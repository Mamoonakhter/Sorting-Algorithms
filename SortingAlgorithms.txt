import java.util.*;

 class Sorting {
	public static void main(String[] args) {
		int arr[] = { 5, 3, 2, 1, 4 };
		// SelectionSort(arr);
		// BubbleSort(arr);
		// InsertionSort(arr);
		//Quicksort(arr, 0, arr.length - 1);
		mergeSort(arr,0,arr.length-1);
		System.out.println(Arrays.toString(arr));
	}

	private static void mergeSort(int[] arr,int low,int high) {
			if(low<high) {
				int mid = (low+high)/2;
				mergeSort(arr,low,mid);
				mergeSort(arr,mid+1,high);
				
				// merge
				merge(arr,low,mid,high);
			}
			
	}

	private static void merge(int[] arr, int low, int mid, int high) {
		int n1 = mid-low+1;
		int n2= high-mid;
		
		int l[]= new int[n1];
		int r[]= new int[n2];
		for(int i=0;i<n1;i++) {
			l[i]=arr[low+i];
		}
		for(int j=0;j<n2;j++) {
			r[j]=arr[mid+1+j];
		}
	
		// merging and storing
		int i=0,j=0;
		int k = low;
		while(i<n1 && j<n2) {
			if(l[i]<r[j]) {
				arr[k]=l[i];
				i++;
			}
			else {
				arr[k]=r[j];
				j++;
			}
			k++;
		}
		
		while(i<n1) {
			arr[k++]=l[i];
			i++;
		}
		
		while(j<n2) {
			arr[k++]=r[j];
			j++;
		}
		
		
	}

	// QuickSort
	private static void Quicksort(int[] arr, int low, int high) {
		// TODO Auto-generated method stub

		if (low < high) {
			int pi=partition(arr, low, high);
			
			System.out.println(pi+" * Partition : "+Arrays.toString(arr));
			Quicksort(arr,low,pi-1);
			Quicksort(arr ,pi+1,high);
		}

	}

	private static int partition(int[] arr, int low, int high) {
		// TODO Auto-generated method stub
		int pivot = arr[high];
		int i = low - 1;
		for (int j = low; j <high; j++) {
			if (arr[j] < pivot) {
				i++;
				swap(arr, i, j);
			}
		}
		
		swap(arr,i+1,high);
		return i+1;

	}

	private static void swap(int[] arr, int i, int j) {
		// TODO Auto-generated method stub
		int temp = arr[i];
		arr[i] = arr[j];
		arr[j] = temp;

	}
	
	// insertion sort

	private static void InsertionSort(int[] arr) {
		// TODO Auto-generated method stub

		for (int i = 0; i < arr.length; i++) {

			int j = i;
			while (j > 0) {
				if (arr[j - 1] > arr[j]) {
					int temp = arr[j - 1];
					arr[j - 1] = arr[j];
					arr[j] = temp;
					j--;
				} else {
					break;
				}
			}

		}

	}

	
	//bubble sort
	
	private static void BubbleSort(int[] arr) {
		for (int i = arr.length; i >= 0; i--) {
			for (int j = 1; j < i; j++) {
				if (arr[j - 1] > arr[j]) {
					int temp = arr[j - 1];
					arr[j - 1] = arr[j];
					arr[j] = temp;
				}
			}
		}

	}

	// selection sort
	static void SelectionSort(int[] arr) {
		for (int i = 0; i < arr.length; i++) {
			int k = -1;
			int l = Integer.MAX_VALUE;
			for (int j = i + 1; j < arr.length; j++) {
				if (l > arr[j]) {
					l = arr[j];
					k = j;
				}
			}

			if (arr[i] > l) {
				int temp = arr[i];
				arr[i] = l;
				arr[k] = temp;
			}
		}

	}

}
